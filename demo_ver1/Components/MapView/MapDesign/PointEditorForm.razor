@using demo_ver1.Services.MapView
@using demo_ver1.HubClients
@using demo_ver1.Management.Share.Models
@using demo_ver1.Share.Helpers

@inject AreaMapProvider MapProvider
@inject MapHubClients MapHub
@inject NotificationService noticeService
@inject MapCommon MapCommon

<Modal Title="Edit point"
       Visible="@IsShowUpdatePoint"
       Width="800"
       DestroyOnClose
       Footer="@null"
       OnCancel="() => IsShowUpdatePoint = false">
    <div class="d-flex flex-row">
        <div class="flex-grow-1">
            <Form Class="flex-grow-1"
                  Model="PointNameModel"
                  Layout="@FormLayout.Vertical"
                  OnFinish="UpdatePointName">
                <FormItem Label="Name">
                    <Input @bind-Value="@context.Name" TValue="string" OnChange="name => context.UniqueName = UniqueNameHelper.ConvertToAsciiName(name)" />
                </FormItem>
                <FormItem Label="Unique name">
                    <Input @bind-Value="@context.UniqueName" />
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        Update
                    </Button>
                </FormItem>
            </Form>
        </div>
        <div class="mx-4" />
        <div class="flex-grow-1">
            <Form Model="PointPositionModel"
                  Layout="@FormLayout.Vertical"
                  OnFinish="UpdatePointPosition">
                <FormItem Label="Position X">
                    <AntDesign.InputNumber @bind-Value="@context.X" Disabled="@(!context.LinkedId.Equals(Guid.Empty))" />
                </FormItem>
                <FormItem Label="Position Y">
                    <AntDesign.InputNumber @bind-Value="@context.Y" Disabled="@(!context.LinkedId.Equals(Guid.Empty))" />
                </FormItem>
                <FormItem Label="Link to">
                    <Select DataSource="@LinkPoints"
                            @bind-Value="@context.LinkedId"
                            LabelName="@nameof(LinkPoint.Name)"
                            ValueName="@nameof(LinkPoint.Value)"
                            DisabledName="@nameof(LinkPoint.IsDisabled)"
                            DefaultActiveFirstOption="@false"
                            EnableSearch
                            OnSelectedItemChanged="OnSelectedLinkPointChangedHandler" />
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        Update
                    </Button>
                    <Button OnClick="ResetSelectedPointPosition">
                        Reset
                    </Button>
                </FormItem>
            </Form>
        </div>

    </div>
</Modal>

@code {
    class LinkPoint
    {
        public Guid Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private bool IsShowUpdatePoint { get; set; } = false;
    private PointNameUpdateModel PointNameModel { get; } = new();
    private PointPositionUpdateModel PointPositionModel { get; } = new();
    private List<LinkPoint> LinkPoints { get; } = new();

    public void Open()
    {
        var point = MapProvider.GetSelectedPoint();
        if (point is null) return;

        PointNameModel.Id = point.Id;
        PointNameModel.Name = point.Name;
        PointNameModel.UniqueName = point.UniqueName;

        PointPositionModel.Id = point.Id;
        PointPositionModel.X = point.X;
        PointPositionModel.Y = point.Y;
        PointPositionModel.LinkedId = point.LinkedPointId;

        LinkPoints.Clear();
        LinkPoints.Add(new LinkPoint() { Name = "Null", Value = Guid.Empty, IsDisabled = false, });
        foreach (var pointModel in MapProvider.AreaMapPoints)
        {
            LinkPoints.Add(new LinkPoint() { Name = pointModel.Name, Value = pointModel.Id, IsDisabled = pointModel.Id.Equals(PointPositionModel.Id), });
        }

        IsShowUpdatePoint = true;
        StateHasChanged();
    }

    private void ResetSelectedPointPosition()
    {
        MapProvider.ResetSelectedPointPosition();
        var point = MapProvider.GetSelectedPoint();
        if (point is null) return;

        PointPositionModel.Id = point.Id;
        PointPositionModel.X = point.X;
        PointPositionModel.Y = point.Y;
        PointPositionModel.LinkedId = point.LinkedPointId;
        StateHasChanged();
    }

    private async Task UpdatePointName()
    {
        var response = await MapHub.UpdatePointName(PointNameModel.Id, PointNameModel.Name, PointNameModel.UniqueName);

        if (!response.IsError)
        {
            MapProvider.UpdateSelectedPointName(PointNameModel.Id, PointNameModel.Name, PointNameModel.UniqueName);
            IsShowUpdatePoint = false;
            StateHasChanged();
        }

        await noticeService.Open(new NotificationConfig()
            {
                Message = $"Update point name",
                Description = response.IsError ? response.Message : "Successfully",
                NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
            });
    }

    private void OnSelectedLinkPointChangedHandler(LinkPoint value)
    {
        var (error, x, y) = MapProvider.GetPointPosition(value.Value);
        if (!error)
        {
            PointPositionModel.X = x;
            PointPositionModel.Y = y;
            StateHasChanged();
        }
    }

    private async Task UpdatePointPosition()
    {
        var response = await MapHub.UpdatePointPosition(PointPositionModel.Id, PointPositionModel.LinkedId, PointPositionModel.X, PointPositionModel.Y);

        if (!response.IsError)
        {
            if (PointPositionModel.LinkedId.Equals(Guid.Empty))
            {
                MapProvider.UpdateSelectedPointPosition(PointPositionModel.Id, PointPositionModel.X, PointPositionModel.Y);
            }
            else
            {
                MapProvider.LinkSelectedPointTo(PointPositionModel.LinkedId);
            }
            IsShowUpdatePoint = false;
            StateHasChanged();
        }

        await noticeService.Open(new NotificationConfig()
            {
                Message = $"Update point name",
                Description = response.IsError ? response.Message : "Successfully",
                NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
            });
    }
}

<style>
    .ant-input-number {
        width: 200px;
    }
</style>
