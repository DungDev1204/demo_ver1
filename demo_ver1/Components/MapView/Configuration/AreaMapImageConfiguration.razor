@implements IDisposable

@using demo_ver1.HubClients
@using demo_ver1.Services.MapView

@inject MapCommon MapCommon
@inject MapHubClients MapHub
@inject NotificationService noticeService

<div class="d-flex flex-column">
    <div class="d-flex flex-row" style="align-items: center">
        <h5 class="m-2">Map Image : </h5>
        <label class="m-1">@MapCommon.MapImageFile</label>
        <Button Class="m-1" Type="@ButtonType.Text" Icon="edit" OnClick="ShowSelectorMapImage" />
    </div>
    <div class="w-100 m-2 d-flex justify-content-center">
        @if (!(string.IsNullOrWhiteSpace(MapCommon.MapImageFile) || string.IsNullOrWhiteSpace(MapCommon.ImageUrl)))
        {
            <Image Src="@MapCommon.ImageUrl" />
        }
    </div>
</div>

<Modal Title="Select map image"
       Visible=@IsShowMapImageSelector
       Width="900"
       DestroyOnClose=@true
       Closable=@false
       OnOk="UpdateMapImage"
       OnCancel="@(e => IsShowMapImageSelector = false)">
    <AreaMapImageSelector MapId="@MapCommon.MapId" @bind-ImageFile="MapImageFile" />
</Modal>

@code {
    private bool IsShowMapImageSelector { get; set; } = false;
    private string? MapImageFile { get; set; }

    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await MapHub.StartAsync();
        MapCommon.OnImageChanged += StateHasChanged;
    }

    private void ShowSelectorMapImage()
    {
        MapImageFile = MapCommon.MapImageFile;
        IsShowMapImageSelector = true;
    }


    private async Task UpdateMapImage()
    {
        IsShowMapImageSelector = false;
        if ((!string.IsNullOrEmpty(MapCommon.MapImageFile) && !MapCommon.MapImageFile.Equals(MapImageFile))
        || (string.IsNullOrEmpty(MapCommon.MapImageFile) && !string.IsNullOrEmpty(MapImageFile)))
        {
            var response = await MapHub.UpdateMapImage(MapCommon.MapId, MapImageFile);

            if (!response.IsError && response.Result is not null && !string.IsNullOrEmpty(response.Result.Url))
            {
                MapCommon.UpdateImage(response.Result.Name ?? "", response.Result.Width, response.Result.Height, response.Result.Url);
            }

            await noticeService.Open(new NotificationConfig()
                {
                    Message = $"Update map image",
                    Description = response.IsError ? response.Message : "Successfully",
                    NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
                });
        }
    }

   

    public void Dispose()
    {
        MapCommon.OnImageChanged -= StateHasChanged;
    }
}