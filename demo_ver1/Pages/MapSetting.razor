@page "/map/{name}"
@attribute [Authorize]
 
@using demo_ver1.Components.MapView
@using demo_ver1.Components.MapView.MapDesign
@using demo_ver1.HubClients
@using demo_ver1.Services.MapView

@inject MapHubClients MapHub
@inject NotificationService noticeService
@inject NavigationManager navManager
@inject AreaMapProvider MapProvider
@inject MapCoordinateConversion CoordinateConversion
@inject MapCommon MapCommon 


<div class="w-100 h-100 d-flex flex-column overflow-hidden pt-2">
	@if (IsLoading)
	{
		<div class="w-100 h-100 d-flex align-items-center justify-content-center">
			<span class="mdi mdi-loading mdi-spin" style="font-size: 42px;" />
		</div>
	}
	else
	{
		<Tabs Class="w-100 h-100 overflow-hidden" Type=@TabType.Card DefaultActiveKey="1">
			<TabBarExtraContent>
				<AreaMapName />
			</TabBarExtraContent>
			<ChildContent>
				<TabPane Key="1" Tab="Configuration">
					<div class="w-100 h-100 position-relative overflow-hidden">
						<div class="position-absolute w-100 h-100" style="top: 0; left: 0; overflow-x: hidden; overflow-y: auto;">
							<AreaMapConfiguration />
						</div>
					</div>
				</TabPane>
				<TabPane Key="2" Tab="Resources">
					<div class="w-100 h-100 position-relative overflow-hidden">
						<div class="position-absolute w-100 h-100" style="top: 0; left: 0; overflow-x: hidden; overflow-y: auto;">
							<AreaMapResourceExplorer />
						</div>
					</div>
				</TabPane>
				<TabPane Key="3" Tab="Design map" Class="ml-1">
					<div class="w-100 h-100 position-relative overflow-hidden">
						<div class="position-absolute w-100 h-100" style="top: 0; left: 0; overflow-x: hidden; overflow-y: auto;">
							<AreaMapDesign />
						</div>
					</div>
				</TabPane>
			</ChildContent>
		</Tabs>
	}
</div>
<Modal Title="Failed to load map information"
	   Visible=@IsError
	   Width="600"
	   DestroyOnClose
	   Closable="@false"
	   OnCancel=@(() => navManager.NavigateTo("/maps"))
	   OnOk="LoadAreaMap">
	<h5>@MessageError</h5>
	<h5>Bạn có muốn thử lại?</h5>
</Modal>

@code {
	[Parameter]
	public string? Name { get; set; }

	private bool IsLoading { get; set; } = true;
	private bool IsDisablePathTab { get; set; } = true;
	private bool IsError { get; set; }
	private string? MessageError { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		await MapHub.StartAsync();
		await LoadAreaMap();
	}

	private async Task LoadAreaMap()
	{
		if (IsError)
		{
			IsError = false;
			MessageError = "";
			StateHasChanged();
		}

		if(string.IsNullOrEmpty(Name))
		{
			return;
		}

		var response = await MapHub.GetMapByName(Name);
		if (response.IsError)
		{
			MessageError = response.Message;
			IsError = true;
		}
		else
		{
			if(response.Result is not null 
				&& !string.IsNullOrEmpty(response.Result.Name)
				&& !string.IsNullOrEmpty(response.Result.UniqueName))
			{
				MapCommon.UpdateName(response.Result.Id, response.Result.Name, response.Result.UniqueName);
				MapCommon.UpdateParameter(response.Result.MapOriginX, response.Result.MapOriginY, response.Result.MapResolution);
				if(!string.IsNullOrEmpty(response.Result.MapImageFile)&& !string.IsNullOrEmpty(response.Result.MapImageUrl))
				{
					MapCommon.UpdateImage(response.Result.MapImageFile, 
						response.Result.MapImageWidth, 
						response.Result.MapImageHeight, 
						response.Result.MapImageUrl);
				}

				MapProvider.LoadPoints(await MapHub.GetPoints(response.Result.Id));
				MapProvider.LoadPaths(await MapHub.GetPaths(response.Result.Id));
			}
			IsLoading = false;
		}
		StateHasChanged();
	}
}
