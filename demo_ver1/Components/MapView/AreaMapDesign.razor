@implements IDisposable

@using demo_ver1.Enums
@using demo_ver1.Services.MapView
@using demo_ver1.HubClients
@using demo_ver1.Components.MapView.MapDesign

@inject MapViewer MapViewer
@inject MapCommon MapCommon
@inject AreaMapProvider MapItems
@inject MapHubClients MapHub
@inject NotificationService noticeService 


@if (string.IsNullOrEmpty(MapCommon.ImageUrl))
{
    <div class="w-100 h-100 d-flex align-items-center jusmargin-rightntent-center">
        <h6>Map image is not set</h6>
    </div>
}
else
{
    <div class="w-100 h-100 d-flex" @onkeyup="OnKeyUp" @onkeyup:stopPropagation tabindex="0">
        <div class="flex-grow-1 d-flex flex-column">
            <MapViewContainer @ref="MapContainerRef"
                      OnMouseDown="OnMouseDown"
                      OnMouseUp="OnMouseUp"
                      OnMouseMove="OnMouseMoveOnMapViewContainer">
                <AreaMapPaths />
                <AreaMapPoints OnPointSelected="() => MapItems.SetDesignCommand(AreaMapDesignCommand.MovePoint)" />
            </MapViewContainer>
            <div class="area-map-path-toolbar">
                <SelectedMapItemName />
                <ButtonIcon MdiIcon="mdi-image-filter-center-focus" OnClick="() => MapViewer.FitContainer()" />
                <AreaMapSaveItemButton />
                <AreaMapItemEditButton />
                <ButtonIcon MdiIcon="mdi-map-marker-plus"
                        Active=@(MapItems.DesignCommand == AreaMapDesignCommand.CreatePoint)
                        OnClick="() => MapItems.SetDesignCommand(AreaMapDesignCommand.CreatePoint)" />
                <ButtonIcon MdiIcon="mdi-vector-line"
                        Active=@(MapItems.DesignCommand == AreaMapDesignCommand.CreateLine)
                        OnClick="() => MapItems.SetDesignCommand(AreaMapDesignCommand.CreateLine)">
                    <PlusTemplate>
                        <span class="mdi mdi-plus" style="font-size: 12px; line-height: 12px; height: fit-content;" />
                    </PlusTemplate>
                </ButtonIcon>
                <ButtonIcon MdiIcon="mdi-vector-radius mdi-rotate-270"
                        Active=@(MapItems.DesignCommand == AreaMapDesignCommand.CreateQuadraticCurveto)
                        OnClick="() => MapItems.SetDesignCommand(AreaMapDesignCommand.CreateQuadraticCurveto)">
                    <PlusTemplate>
                        <span style="font-size: 12px; line-height: 12px; height: fit-content; margin-right: 5px;">
                            T
                        </span>
                    </PlusTemplate>
                </ButtonIcon>
                <ButtonIcon MdiIcon="mdi-vector-radius mdi-rotate-270"
                        Active=@(MapItems.DesignCommand == AreaMapDesignCommand.CreateQuadraticCurveto)
                        OnClick="() => MapItems.SetDesignCommand(AreaMapDesignCommand.CreateQuadraticCurveto)">
                    <PlusTemplate>
                        <span style="font-size: 12px; line-height: 12px; height: fit-content; margin-right: 5px;">
                            T
                        </span>
                    </PlusTemplate>
                </ButtonIcon>
                <span class="flex-grow-1" />
                <AreaMapCursorPosition />

            </div>
        </div>
    </div>
}

@code
{
    private MapViewContainer? MapContainerRef { get; set; }
    private ElementReference MapViewContainer { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MapItems.DesignCommandChanged += OnDesignCommandChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            MapViewer.FitContainer();
        }
    }

    private async Task OnMouseDown(MouseEventArgs e)
    {
        switch (MapItems.DesignCommand)
        {
            case AreaMapDesignCommand.CreatePoint:
                {
                    var response = await MapHub.CreatePoint(MapCommon.MapId, Math.Round(MapViewer.CursorPossitionX, 4), Math.Round(MapViewer.CursorPossitionY, 4));

                    if (response.IsError)
                    {
                        await noticeService.Open(new NotificationConfig()
                            {
                                Message = $"Create point",
                                Description = response.Message,
                                NotificationType = NotificationType.Error,
                            });
                    }
                    else
                    {
                        if (response.Result is not null)
                        {
                            MapItems.AddPoint(response.Result);
                        }
                    }
                }
                break;
            case AreaMapDesignCommand.CreateLine:
                MapItems.CreateLine(Math.Round(MapViewer.CursorPossitionX, 4), Math.Round(MapViewer.CursorPossitionY, 4));
                break;
            case AreaMapDesignCommand.CreateQuadraticCurveto:
                MapItems.CreateQuadraticCurveto(Math.Round(MapViewer.CursorPossitionX, 4), Math.Round(MapViewer.CursorPossitionY, 4));
                break;
        }
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        switch (MapItems.DesignCommand)
        {
            case AreaMapDesignCommand.CreateLine:
            case AreaMapDesignCommand.CreateQuadraticCurveto:
                {
                    var createModel = MapItems.GetSelectedPathCreateModel();
                    if (createModel is null) break;

                    createModel.AreaId = MapCommon.MapId;
                    var response = await MapHub.CreatePath(createModel);
                    if (response.IsError)
                    {
                        await noticeService.Open(new NotificationConfig()
                            {
                                Message = $"Create path {createModel.PathType}",
                                Description = response.Message,
                                NotificationType = NotificationType.Error,
                            });
                    }
                    else
                    {
                        MapItems.DeleteSelectedPath();
                        if (response.Result is not null)
                        {
                            MapItems.AddPoints(await MapHub.GetSupportPoints(response.Result.Id));
                            MapItems.AddPath(response.Result);
                        }
                    }
                }
                break;
        }

     
    }

    private void OnMouseLeave(EventArgs e)
    {
        switch (MapItems.DesignCommand)
        {
            case AreaMapDesignCommand.MovePoint:
                MapItems.SetDesignCommand(AreaMapDesignCommand.Default);
                break;
        }
    }

    private void OnDesignCommandChanged(AreaMapDesignCommand command)
    {
        switch (command)
        {
            case AreaMapDesignCommand.CreatePoint:
            case AreaMapDesignCommand.CreateLine:
            case AreaMapDesignCommand.CreateQuadraticCurveto:
                MapContainerRef?.SetCursor("crosshair");
                break;
            default:
                MapContainerRef?.SetCursor("move");
                break;
        }
        StateHasChanged();
    }

    private void OnMouseMoveOnMapViewContainer(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            switch (MapItems.DesignCommand)
            {
                case AreaMapDesignCommand.MovePoint:
                    if (e.CtrlKey)
                    {
                        MapItems.MoveSelectedPointTo(MapViewer.CursorPossitionX, MapViewer.CursorPossitionY);
                    }
                    break;
                case AreaMapDesignCommand.CreateLine:
                case AreaMapDesignCommand.CreateQuadraticCurveto:
                    MapItems.MoveSelectedPointTo(MapViewer.CursorPossitionX, MapViewer.CursorPossitionY);
                    break;
            }
        }
        StateHasChanged();
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "Escape":
                MapItems.SelectPoint(null);
                MapItems.SelectPath(null);
                MapItems.SetDesignCommand(AreaMapDesignCommand.Default);
                break;
            case "Delete":
                if (MapItems.IsSeletedItem)
                {
                    var pathId = MapItems.SelectedPathId;
                    if (!pathId.Equals(Guid.Empty))
                    {
                        var response = await MapHub.DeletePath(pathId);
                        if (!response.IsError)
                        {
                            MapItems.DeleteSelectedPath();
                        }
                        await noticeService.Open(new NotificationConfig()
                            {
                                Message = $"Delete path",
                                Description = response.IsError ? response.Message : "Successfully",
                                NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
                            });
                    }
                    else
                    {
                        var pointId = MapItems.SelectedPointId;
                        if (!pointId.Equals(Guid.Empty))
                        {
                            var response = await MapHub.DeletePoint(pointId);
                            if (!response.IsError)
                            {
                                MapItems.DeleteSelectedPoint();
                            }
                            await noticeService.Open(new NotificationConfig()
                                {
                                    Message = $"Delete point",
                                    Description = response.IsError ? response.Message : "Successfully",
                                    NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
                                });
                        }
                    }
                }
                break;
        }
    }

    public void Dispose()
	{
        MapItems.DesignCommandChanged += OnDesignCommandChanged;
	}
}