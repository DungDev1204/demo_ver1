@implements IDisposable

@using demo_ver1.Services.MapView
@using demo_ver1.HubClients
@using demo_ver1.Management.Share.Models

@inject AreaMapProvider MapProvider
@inject NotificationService noticeService
@inject MapCommon MapCommon
@inject MapHubClients MapHub


<Badge Count="@MapProvider.ChangedItemsCount" OverflowCount="100" Size="small">
	<ButtonIcon MdiIcon="mdi-content-save" Disable="@(MapProvider.ChangedItemsCount <= 0)" OnClick="OnClick" />
</Badge>



@code {
	protected override void OnInitialized()
	{
		base.OnInitialized();
		MapProvider.ChangedItemsCountChanged += StateHasChanged;
	}

	private async Task OnClick()
	{
		var savedCount = await MapProvider.UpdateChangedPoints(async (id, linkId, x, y) =>
		{
			var response = await MapHub.UpdatePointPosition(id, linkId, x, y);

			if (response.IsError)
			{
				await noticeService.Open(new NotificationConfig()
					{
						Message = $"Update point error",
						Description = response.Message,
						NotificationType = NotificationType.Error,
					});
			}
			return !response.IsError;
		});

		if (savedCount > 0)
		{
			await noticeService.Open(new NotificationConfig()
				{
					Message = $"Update points",
					Description = $"Updated {savedCount} points",
					NotificationType = NotificationType.Success,
				});
		}
	}

	public void Dispose()
	{
		MapProvider.ChangedItemsCountChanged -= StateHasChanged;
	}
}

<style>
	.ant-badge .ant-badge-count {
		top: 5px;
		right: 5px;
	}
</style>

