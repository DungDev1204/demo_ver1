@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using demo_ver1.JsRuntime
@using demo_ver1.HubClients
@using demo_ver1.Services.MapView
@using demo_ver1.Share.Dtos
@using Microsoft.JSInterop

@inject MapHubClients MapHub
@inject MapCommon MapCommon
@inject NotificationService noticeService 
@inject IJSRuntime JsRuntime
@inject IAccessTokenProvider AccessTokenProvider
@inject IConfiguration Configuration

<div class="w-100 h-100 p-3">
	<Upload @bind-FileList="ResourceList"
			Action=@AreaMapResourceUploadUrl
			Name="resource"
			ListType="picture"
			Multiple
			Headers=@HttpHeaders
			BeforeAllUploadAsync="AllUploadAsyncBeforeHandle"
			OnChange="UploadHandleChange"
			OnRemove="DeleteResource">
		<Button Icon="upload">
			<span>Upload</span>
		</Button>
	</Upload>
</div>

@code {
	private string? AreaMapResourceUploadUrl { get; set; }
	private List<UploadFileItem> ResourceList { get; set; } = new List<UploadFileItem>();
	private readonly Dictionary<String, string> HttpHeaders = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		await MapHub.StartAsync();
		var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
		if (accessTokenResult?.TryGetToken(out var token) ?? false)
		{
			HttpHeaders.Add("authorization", $"Bearer {token.Value}");
		}

		AreaMapResourceUploadUrl = $"{Configuration.GetConnectionString("HostServer")}/api/maps/{MapCommon.MapUniqueName}/resource";
		var resources = await MapHub.GetMapResourceFiles(MapCommon.MapId, "");
		foreach (var resource in resources)
		{
			ResourceList.Add(new UploadFileItem()
				{
					Id = $"{resource.AreaMapId}/{resource.Name}",
					FileName = resource.Name,
					State = UploadState.Success,
					Type = resource.ContentType,
					Url = resource.FileUrl,
					ObjectURL = resource.FileUrl,
				});
		}
	}

	private void UploadHandleChange(UploadInfo fileinfo)
	{
		if (fileinfo.File.State == UploadState.Success)
		{
			var resource = System.Text.Json.JsonSerializer.Deserialize<AreaMapResourceDto>(fileinfo.File.Response);
			if (resource is null)
			{
				_ = noticeService.Open(new NotificationConfig()
					{
						Message = $"Update file",
						Description = "Can not find map information",
						NotificationType = NotificationType.Error,
					});
			}
			else
			{
				fileinfo.File.Id =  $"{resource.AreaMapId}/{resource.Name}";
				fileinfo.File.Url = resource.FileUrl;
				fileinfo.File.ObjectURL = resource.FileUrl;
				fileinfo.File.Type = resource.ContentType;
			}
		}
	}

	private async Task<bool> AllUploadAsyncBeforeHandle(List<UploadFileItem> fileinfos)
	{
		var removeResources = new List<UploadFileItem>();
		for (int i = 0; i < fileinfos.Count; i++)
		{
			if (await MapHub.CheckExistMapResourceFile(MapCommon.MapId, fileinfos[i].FileName))
			{
				if (await JsRuntime.Confirm($"File {fileinfos[i].FileName} đã tồn tại. Bạn có muốn  tiếp tục upload không?"))
				{
					var resource = ResourceList.FirstOrDefault(r => r.FileName.Equals(fileinfos[i].FileName));
					if (resource is not null)
					{
						removeResources.Add(resource);
					}
				}
				else
				{
					return false;
				}
			}
		}

		if (removeResources.Count > 0)
		{
			for (int i = 0; i < removeResources.Count; i++)
			{
				ResourceList.Remove(removeResources[i]);
			}
			StateHasChanged();
		}
		return true;
	}

	private async Task<bool> DeleteResource(UploadFileItem file)
	{
		if (!await JsRuntime.Confirm($"Xác nhận xóa file {file.FileName}?"))
		{
			return false;
		}

		if (file.FileName.Equals(MapCommon.MapImageFile))
		{
			if (!await JsRuntime.Confirm($"File đang được sử dụng làm map. Xác nhận xóa file {file.FileName}?"))
			{
				return false;
			}
		}

		var response = await MapHub.DeleteMapResource(MapCommon.MapId, file.FileName);
		_ = noticeService.Open(new NotificationConfig()
			{
				Message = $"Delete resource file {file.FileName}",
				Description = response.IsError ? response.Message : "Successfully",
				NotificationType = response.IsError ? NotificationType.Error : NotificationType.Success,
			});

		if (file.FileName.Equals(MapCommon.MapImageFile))
		{
			MapCommon.UpdateImage("", 0, 0, "");
		}

		return !response.IsError;
	}
}
