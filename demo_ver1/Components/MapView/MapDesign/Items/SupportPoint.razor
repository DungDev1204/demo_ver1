@implements IDisposable

@using demo_ver1.Models.MapView
@using demo_ver1.Services.MapView

@inject MapViewer MapViewer
@inject MapCoordinateConversion CoordinateConversion

<g transform=@Transform
   visibility=@Visibility
   @onclick:stopPropagation
   @onmousedown="OnMouseDown">
    <g class="point-map support @ActiveClass">
        <circle r="@Radius" />
    </g>
</g>

@code {
    [Parameter]
    public PointModel Model { get; set; }

    [Parameter]
    public EventCallback<PointModel> OnSelect { get; set; }

    private string Transform => $"translate({Model.PixelX} {Model.PixelY}) scale({1 / MapViewer.Scale})";
    private string Visibility => Model.IsSupportActive ? "visible" : "hidden";
    private string ActiveClass => Model.IsSelected ? "active" : "";
    private int Radius => Model.IsSelected ? 4 : 3;

    protected override void OnInitialized()
    {
        MapViewer.OnScaled += StateHasChanged;
        CoordinateConversion.OnChanged += StateHasChanged;
        Model.OnChanged += StateHasChanged;
    }

    private void OnMouseDown()
    {
        Model.Select();
        OnSelect.InvokeAsync(Model);
    }

    public void Dispose()
    {
        MapViewer.OnScaled -= StateHasChanged;
        CoordinateConversion.OnChanged -= StateHasChanged;
        Model.OnChanged -= StateHasChanged;
    }
}